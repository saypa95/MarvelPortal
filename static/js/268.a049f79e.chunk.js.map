{"version":3,"file":"static/js/268.a049f79e.chunk.js","mappings":"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","sources":["components/banner/Banner.js","components/errorMessage/ErrorMessage.js","components/singleComics/SingleComic.js","components/pages/SingleComicPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import \"./banner.scss\";\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst Banner = () => {\n  return (\n    <div className=\"banner\">\n      <img className=\"banner__img\" src={avengers} alt=\"Avengers\" />\n      <div className=\"banner__text\">New comics every week! Stay tuned!</div>\n      <img className=\"banner__logo\" src={avengersLogo} alt=\"Avengers logo\" />\n    </div>\n  );\n};\n\nexport default Banner;\n","import errorImg from './error.gif'\n\nconst ErrorMessage = () => {\n  return (\n    <img src={errorImg} alt=\"error\" style={{ display: 'block', width: \"180px\", height: \"180px\",objectFit: 'contain', margin: \"0 auto\"}}/>\n  );\n};\n\nexport default ErrorMessage;","import { Helmet } from \"react-helmet\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nimport \"./singleComic.scss\";\n\nconst SingleComic = () => {\n  const { comicId } = useParams();\n  const [comic, setComic] = useState(null);\n\n  const { getComic, loading, error, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [comicId]);\n\n  const updateChar = () => {\n    clearError();\n    getComic(comicId).then(onComicLoaded);\n  };\n\n  const onComicLoaded = (comic) => {\n    setComic(comic);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = spinner || errorMessage || !comic || <ComicView comic={comic} />;\n\n  return <div className=\"single-comics\">{content}</div>;\n};\n\nconst ComicView = ({ comic }) => {\n  const {title, description, pageCount, thumbnail, language, price} = comic;\n  \n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content={`${title} comic book`} />\n        <title>{title}</title>\n      </Helmet>\n      <img src={thumbnail} alt={title} className=\"single-comics__img\" />\n      <div className=\"single-comics__info\">\n        <h2 className=\"single-comics__name\">{title}</h2>\n        <p className=\"single-comics__descr\">\n        {description}\n        </p>\n        <p className=\"single-comics__descr\">{pageCount}</p>\n        <p className=\"single-comics__descr\">Language: {language}</p>\n        <div className=\"single-comics__price\">{price}</div>\n      </div>\n      <Link to=\"../MarvelPortal/comics\" className=\"single-comics__back\">\n        Back to all\n      </Link>\n    </>\n  );\n};\n\nexport default SingleComic;\n","import SingleComic from \"../singleComics/SingleComic\";\nimport Banner from \"../banner/Banner\";\n\nconst SingleComicPage = () => {\n  return (\n    <>\n      <Banner/>\n      <SingleComic/>\n    </>\n  );\n}\n\nexport default SingleComicPage;","import useHttp from '../hooks/http.hook';\n\nfunction useMarvelService() {\n  const {loading, request, error, clearError} = useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=3b7580081684b29906e841c03f5f42aa\";\n  const _baseOffset = 0;\n  const _baseOffsetComics = 100;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getCharacterByName = async (name) => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const _cutDescription = (desc) => {\n    if (desc.length === 0) {\n      return \"There is no description for this character\";\n    }\n\n    if (desc.length > 210) {\n      desc = desc.slice(0, 210) + \"...\";\n    }\n\n    return desc;\n  };\n\n  const _cutComicsList = (comicsList) => {\n    if (comicsList.length === 0) {\n      return [{ name: \"There is no comics for this character\" }];\n    }\n\n    if (comicsList.length > 10) {\n      comicsList.length = 10;\n    }\n    return comicsList;\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: _cutDescription(char.description),\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comicsList: _cutComicsList(char.comics.items),\n    };\n  };\n\n  const getAllComics = async (offset = _baseOffsetComics) => {\n    const res = await request(`${_apiBase}comics?orderBy=-issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n}\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || 'There is no description',\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\n      pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\n      language: comics.textObjects[0]?.language || 'en-us',\n    };\n  };\n\n  return {getCharacterByName, getAllComics, getComic, getAllCharacters, getCharacter, loading, error, clearError};\n}\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport default function useHttp() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(\n    async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\n      setLoading(true);\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        setLoading(false);\n\n        return data;\n      } catch (e) {\n        setLoading(false);\n        setError(e.message);\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => setError(null), []);\n\n  return {loading, request, error, clearError}\n}\n"],"names":["className","src","avengers","alt","avengersLogo","errorImg","style","display","width","height","objectFit","margin","ComicView","comic","title","description","pageCount","thumbnail","language","price","Helmet","name","content","to","comicId","useParams","useState","setComic","useMarvelService","getComic","loading","error","clearError","useEffect","updateChar","then","onComicLoaded","errorMessage","ErrorMessage","Spinner","Banner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getCharacterByName","char","desc","length","slice","path","extension","homepage","urls","wiki","comicsList","comics","items","getAllComics","_transformComics","prices","textObjects"],"sourceRoot":""}