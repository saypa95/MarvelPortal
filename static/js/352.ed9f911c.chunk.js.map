{"version":3,"file":"static/js/352.ed9f911c.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/errorBoundary/ErrorBoundary.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/findCharForm/FindCharForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import errorImg from './error.gif'\n\nconst ErrorMessage = () => {\n  return (\n    <img src={errorImg} alt=\"error\" style={{ display: 'block', width: \"180px\", height: \"180px\",objectFit: 'contain', margin: \"0 auto\"}}/>\n  );\n};\n\nexport default ErrorMessage;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n\n    this.setState({ error: true });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage/>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n\n  const {getCharacter, loading, error, clearError} = useMarvelService();\n\n  const onCharLoaded = (char) => {\n    clearError();\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id).then(onCharLoaded)\n  };\n\n  useEffect(updateChar, []);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = spinner || errorMessage || <CharView char={char} />;\n\n  return (\n    <div className=\"random-char\">\n      <div className=\"random-char__dynamic\">{content}</div>\n      <div className=\"random-char__static\">\n        <p className=\"random-char__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"random-char__title\">Or choose another one</p>\n        <button className=\"button\" onClick={updateChar}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"random-char__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst CharView = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n\n  return (\n    <>\n      <img src={thumbnail} alt=\"Random character\" className=\"random-char__img\" />\n      <div className=\"random-char__info\">\n        <p className=\"random-char__name\">{name}</p>\n        <p className=\"random-char__decription\">{description}</p>\n        <div className=\"random-char__buttons\">\n          <a href={homepage} className=\"button\" target=\"_blank\" rel=\"noreferrer\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button_grey\" target=\"_blank\" rel=\"noreferrer\">\n            <div className=\"inner\">wiki</div>\n          </a>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemsLoading, setNewItemsLoading] = useState(false);\n  const [offset, setOffset] = useState(0);\n  const [charsEnded, setCharsEnded] = useState(false);\n\n  const { getAllCharacters, loading, error } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemsLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharsEnded(ended);\n  };\n\n  const cardRefs = useRef([]);\n\n  const toggleActiveCard = (id) => {\n    cardRefs.current.forEach((item) => item.classList.remove(\"char-card_selected\"));\n    cardRefs.current[id].classList.add(\"char-card_selected\");\n  };\n\n  const renderList = (data) => {\n    return (\n      <TransitionGroup component={null}>\n        {data.map((char, i) => {\n          return (\n            <CSSTransition key={char.id} timeout={500} classNames=\"char-card\">\n              <a href=\"#charContent\" ref={(el) => (cardRefs.current[i] = el)}>\n                <div\n                  className=\"char-card\"\n                  onClick={() => {\n                    props.onCharSelected(char.id);\n                    toggleActiveCard(i);\n                  }}\n                >\n                  <img src={char.thumbnail} alt=\"charImg\" />\n                  <div className=\"char-card__name\">{char.name}</div>\n                </div>\n              </a>\n            </CSSTransition>\n          );\n        })}\n      </TransitionGroup>\n    );\n  };\n\n  const list = renderList(charList);\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemsLoading ? <Spinner /> : null;\n  const content = spinner || errorMessage || list;\n\n  return (\n    <div className=\"char-list\">\n      <div className=\"char-list_wrapper\">{content}</div>\n      <button\n        className=\"button button_long\"\n        onClick={() => onRequest(offset)}\n        disabled={newItemsLoading}\n        style={{ display: charsEnded ? \"none\" : \"block\" }}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n  return (\n    <div className=\"skeleton\">\n      <div className=\"pulse skeleton__header\">\n        <div className=\"pulse skeleton__circle\"></div>\n        <div className=\"pulse skeleton__mini\"></div>\n      </div>\n      <div className=\"pulse skeleton__block\"></div>\n      <div className=\"pulse skeleton__block\"></div>\n      <div className=\"pulse skeleton__block\"></div>\n    </div>\n  );\n};\n\nexport default Skeleton;\n","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const {getCharacter, loading, error, clearError} = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) return;\n\n    clearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = spinner || errorMessage || !char || <InfoView char={char} />;\n  const skeleton =\n    char || loading || error ? null : (\n      <div className=\"char-info__skeleton\">\n        <p className=\"char-info__skeleton-title\">Please select a character to see information</p>\n        <Skeleton />\n      </div>\n    );\n\n  return (\n    <div className=\"char-info\">\n      {skeleton}\n      {content}\n    </div>\n  );\n};\n\nconst InfoView = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comicsList } = char;\n  return (\n    <>\n      <div className=\"char-info__header\">\n        <img className=\"char-info__img\" src={thumbnail} alt=\"img\" />\n        <div className=\"char-info__links\">\n          <p className=\"char-info__name\">{name}</p>\n          <div className=\"char-info__btns\">\n            <a href={homepage} className=\"button\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button_grey\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"char-info__description\">{description}</div>\n\n      <div className=\"char-info__comics\">\n        <p className=\"char-info__comics-title\">Comics:</p>\n        <ul className=\"char-info__comics-list\">\n          {comicsList.map((comics, i) => {\n            return (\n              <li className=\"char-info__comics-item\" key={i}>\n                {comics.name}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Formik, Field, Form, ErrorMessage as FormikErrorMessage } from \"formik\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./findCharForm.scss\";\n\nconst FindCharForm = (props) => {\n  const [char, setChar] = useState(null);\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n    if(char.length > 0){\n      props.onCharFinded(char[0].id)\n    }\n  };\n\n  const updateChar = (charName) => {\n    clearError();\n    getCharacterByName(charName).then(onCharLoaded);\n  };\n\n  const errorMessage = error ? (\n    <div style={{ \"margin-top\": \"18px\" }}>\n      <ErrorMessage />\n    </div>\n  ) : null;\n  const results = !char ? null : char.length ? null : (\n    <div className=\"find-char-form__error\">The character was not found. Check the name and try again</div>\n  );\n\n  return (\n    <div className=\"find-char-form\">\n      <Formik\n        initialValues={{\n          charName: \"\",\n        }}\n        validationSchema={Yup.object({\n          charName: Yup.string().required(\"This field is required\"),\n        })}\n        onSubmit={({ charName }) => {\n          updateChar(charName);\n        }}\n      >\n        <Form>\n          <h2 className=\"find-char-form__header\">Or find a character by name:</h2>\n          <div className=\"find-char-form__wrapper\">\n            <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter the name\" />\n            <button className=\"button \" type=\"submit\" disabled={loading}>\n              <div className=\"inner\">find</div>\n            </button>\n          </div>\n          <FormikErrorMessage component=\"div\" className=\"find-char-form__error\" name=\"charName\" />\n        </Form>\n      </Formik>\n      {results}\n      {errorMessage}\n    </div>\n  );\n};\n\nexport default FindCharForm;\n","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\n\nimport vision from \"../../resources/img/vision.png\";\nimport FindCharForm from \"../findCharForm/FindCharForm\";\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelected = (id) => {\n    setChar(id);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Marvel information portal\" />\n        <title>Marvel information portal</title>\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char-content\" id=\"charContent\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <div className=\"char-content__sidebar\">\n          <ErrorBoundary>\n            <CharInfo charId={selectedChar} />\n          </ErrorBoundary>\n          <FindCharForm onCharFinded={onCharSelected} />\n        </div>\n        <img className=\"char-content__decoration\" src={vision} alt=\"vision\" />\n      </div>\n    </>\n  );\n};\n\nexport default MainPage;\n","import useHttp from '../hooks/http.hook';\n\nfunction useMarvelService() {\n  const {loading, request, error, clearError} = useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=3b7580081684b29906e841c03f5f42aa\";\n  const _baseOffset = 0;\n  const _baseOffsetComics = 100;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getCharacterByName = async (name) => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const _cutDescription = (desc) => {\n    if (desc.length === 0) {\n      return \"There is no description for this character\";\n    }\n\n    if (desc.length > 210) {\n      desc = desc.slice(0, 210) + \"...\";\n    }\n\n    return desc;\n  };\n\n  const _cutComicsList = (comicsList) => {\n    if (comicsList.length === 0) {\n      return [{ name: \"There is no comics for this character\" }];\n    }\n\n    if (comicsList.length > 10) {\n      comicsList.length = 10;\n    }\n    return comicsList;\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: _cutDescription(char.description),\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comicsList: _cutComicsList(char.comics.items),\n    };\n  };\n\n  const getAllComics = async (offset = _baseOffsetComics) => {\n    const res = await request(`${_apiBase}comics?orderBy=-issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n}\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || 'There is no description',\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\n      pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\n      language: comics.textObjects[0]?.language || 'en-us',\n    };\n  };\n\n  return {getCharacterByName, getAllComics, getComic, getAllCharacters, getCharacter, loading, error, clearError};\n}\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport default function useHttp() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(\n    async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\n      setLoading(true);\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        setLoading(false);\n\n        return data;\n      } catch (e) {\n        setLoading(false);\n        setError(e.message);\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => setError(null), []);\n\n  return {loading, request, error, clearError}\n}\n"],"names":["src","errorImg","alt","style","display","width","height","objectFit","margin","ErrorBoundary","state","error","errorInfo","console","log","this","setState","ErrorMessage","props","children","Component","CharView","char","name","description","thumbnail","homepage","wiki","className","href","target","rel","useState","setChar","useMarvelService","getCharacter","loading","clearError","onCharLoaded","updateChar","id","Math","floor","random","then","useEffect","errorMessage","content","Spinner","onClick","mjolnir","charList","setCharList","newItemsLoading","setNewItemsLoading","offset","setOffset","charsEnded","setCharsEnded","getAllCharacters","onRequest","data","initial","onCharListLoaded","newCharList","ended","length","cardRefs","useRef","list","TransitionGroup","component","map","i","CSSTransition","timeout","classNames","ref","el","current","onCharSelected","forEach","item","classList","remove","add","disabled","InfoView","comicsList","comics","charId","skeleton","getCharacterByName","onCharFinded","results","initialValues","charName","validationSchema","Yup","required","onSubmit","type","placeholder","selectedChar","Helmet","vision","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","desc","slice","path","extension","urls","items","getAllComics","_transformComics","getComic","title","price","prices","pageCount","language","textObjects"],"sourceRoot":""}