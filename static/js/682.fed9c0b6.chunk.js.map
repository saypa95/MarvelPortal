{"version":3,"file":"static/js/682.fed9c0b6.chunk.js","mappings":"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","sources":["components/banner/Banner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import \"./banner.scss\";\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst Banner = () => {\n  return (\n    <div className=\"banner\">\n      <img className=\"banner__img\" src={avengers} alt=\"Avengers\" />\n      <div className=\"banner__text\">New comics every week! Stay tuned!</div>\n      <img className=\"banner__logo\" src={avengersLogo} alt=\"Avengers logo\" />\n    </div>\n  );\n};\n\nexport default Banner;\n","import errorImg from './error.gif'\n\nconst ErrorMessage = () => {\n  return (\n    <img src={errorImg} alt=\"error\" style={{ display: 'block', width: \"180px\", height: \"180px\",objectFit: 'contain', margin: \"0 auto\"}}/>\n  );\n};\n\nexport default ErrorMessage;","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./comicsList.scss\";\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemsLoading, setNewItemsLoading] = useState(false);\n  const [offset, setOffset] = useState(100);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { getAllComics, loading, error } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\n    getAllComics(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = (newComicsList) => {\n    let ended = false;\n    if (newComicsList.length < 8) {\n      ended = true;\n    }\n\n    setComicsList((comicsList) => [...comicsList, ...newComicsList]);\n    setNewItemsLoading(false);\n    setOffset((offset) => offset + 8);\n    setComicsEnded(ended);\n  };\n\n  const renderList = (data) => {\n    return data.map((comics, i) => {\n      return (\n        <div className=\"comics-card\" key={i}>\n          <Link to={`${comics.id}`}>\n            <img src={comics.thumbnail} alt=\"comics-img\" className=\"comics-card__img\" />\n            <div className=\"comics-card__name\">{comics.title}</div>\n            <div className=\"comics-card__price\">{`${comics.price}$`}</div>\n          </Link>\n        </div>\n      );\n    });\n  };\n\n  const list = renderList(comicsList);\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemsLoading ? <Spinner /> : null;\n  const content = spinner || errorMessage || list;\n\n  return (\n    <div className=\"comics-list\">\n      <div className=\"comics-card-wrapper\">{content}</div>\n\n      <button\n        className=\"button button_long\"\n        onClick={() => onRequest(offset)}\n        disabled={newItemsLoading}\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import { Helmet } from \"react-helmet\";\n\nimport ComicsList from \"../comicsList/ComicsList\";\nimport Banner from \"../banner/Banner\";\n\nconst ComicsPage = () => {\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Page with list of our comics\" />\n        <title>Comics page</title>\n      </Helmet>\n      <Banner/>\n      <ComicsList/>\n    </>\n  );\n}\n\nexport default ComicsPage;","import useHttp from '../hooks/http.hook';\n\nfunction useMarvelService() {\n  const {loading, request, error, clearError} = useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=3b7580081684b29906e841c03f5f42aa\";\n  const _baseOffset = 0;\n  const _baseOffsetComics = 100;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getCharacterByName = async (name) => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const _cutDescription = (desc) => {\n    if (desc.length === 0) {\n      return \"There is no description for this character\";\n    }\n\n    if (desc.length > 210) {\n      desc = desc.slice(0, 210) + \"...\";\n    }\n\n    return desc;\n  };\n\n  const _cutComicsList = (comicsList) => {\n    if (comicsList.length === 0) {\n      return [{ name: \"There is no comics for this character\" }];\n    }\n\n    if (comicsList.length > 10) {\n      comicsList.length = 10;\n    }\n    return comicsList;\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: _cutDescription(char.description),\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comicsList: _cutComicsList(char.comics.items),\n    };\n  };\n\n  const getAllComics = async (offset = _baseOffsetComics) => {\n    const res = await request(`${_apiBase}comics?orderBy=-issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n}\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || 'There is no description',\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\n      pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\n      language: comics.textObjects[0]?.language || 'en-us',\n    };\n  };\n\n  return {getCharacterByName, getAllComics, getComic, getAllCharacters, getCharacter, loading, error, clearError};\n}\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport default function useHttp() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(\n    async (url, method = \"GET\", body = null, headers = { \"Content-Type\": \"application/json\" }) => {\n      setLoading(true);\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        setLoading(false);\n\n        return data;\n      } catch (e) {\n        setLoading(false);\n        setError(e.message);\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => setError(null), []);\n\n  return {loading, request, error, clearError}\n}\n"],"names":["className","src","avengers","alt","avengersLogo","errorImg","style","display","width","height","objectFit","margin","useState","comicsList","setComicsList","newItemsLoading","setNewItemsLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","loading","error","useEffect","onRequest","initial","then","onCharListLoaded","newComicsList","ended","length","list","map","comics","i","to","id","thumbnail","title","price","errorMessage","ErrorMessage","content","Spinner","onClick","disabled","Helmet","name","Banner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getCharacter","getCharacterByName","char","description","desc","slice","path","extension","homepage","urls","wiki","items","_transformComics","getComic","prices","pageCount","language","textObjects"],"sourceRoot":""}